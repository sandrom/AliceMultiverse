[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "alicemultiverse"
dynamic = ["version"]
description = "AI Media Organizer - Automatically organize AI-generated images by source, date, and quality"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "AliceMultiverse Contributors", email = "contact@alicemultiverse.ai"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Multimedia :: Graphics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "pillow>=10.0.0",
    "numpy>=1.24.0",
    "opencv-python>=4.8.0",
    "tqdm>=4.66.0",
    "omegaconf>=2.3.0",
    "aiohttp>=3.9.0",
    "requests>=2.31.0",
    "pyyaml>=6.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
quality = ["image-quality>=1.2.7"]
secure = ["keyring>=24.0.0", "python-dotenv>=1.0.0"]
premium = ["anthropic>=0.18.0"]
full = [
    "image-quality>=1.2.7",
    "keyring>=24.0.0",
    "python-dotenv>=1.0.0",
    "anthropic>=0.18.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.1.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "types-requests",
    "types-aiofiles",
    "types-pyyaml",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
alice = "alicemultiverse.interface.main_cli:main"

[project.urls]
Homepage = "https://github.com/alicemultiverse/alicemultiverse"
Documentation = "https://alicemultiverse.readthedocs.io"
"Bug Reports" = "https://github.com/alicemultiverse/alicemultiverse/issues"
"Source Code" = "https://github.com/alicemultiverse/alicemultiverse"

[tool.setuptools]
packages = {find = {where = ["."], include = ["alicemultiverse*"]}}
include-package-data = true

[tool.setuptools.package-data]
alicemultiverse = ["py.typed", "*.yaml", "*.yml"]

[tool.setuptools.dynamic]
version = {attr = "alicemultiverse.version.__version__"}

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
files = ["alicemultiverse"]
exclude = ["tests", "scripts", "examples"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests that require external services",
]

[tool.coverage.run]
source = ["alicemultiverse"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/scripts/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]