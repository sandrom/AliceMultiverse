[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "alicemultiverse"
dynamic = ["version"]
description = "AI Assistant Interface & Creative Workflow Hub - Connect AI assistants with local tools and creative workflows"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "AliceMultiverse Contributors", email = "contact@alicemultiverse.ai"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Multimedia :: Graphics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "pillow>=10.0.0",
    "numpy>=1.24.0",
    "opencv-python>=4.8.0",
    "tqdm>=4.66.0",
    "omegaconf>=2.3.0",
    "aiohttp>=3.9.0",
    "requests>=2.31.0",
    "pyyaml>=6.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
quality = ["image-quality>=1.2.7"]
secure = ["keyring>=24.0.0", "python-dotenv>=1.0.0"]
premium = ["anthropic>=0.18.0"]
full = [
    "image-quality>=1.2.7",
    "keyring>=24.0.0",
    "python-dotenv>=1.0.0",
    "anthropic>=0.18.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
alice = "alicemultiverse.interface.main_cli:main"

[project.urls]
"Homepage" = "https://github.com/yourusername/AliceMultiverse"
"Bug Tracker" = "https://github.com/yourusername/AliceMultiverse/issues"

[tool.setuptools.dynamic]
version = {attr = "alicemultiverse.version.__version__"}

[tool.setuptools.packages.find]
where = ["."]
include = ["alicemultiverse*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
alicemultiverse = ["py.typed"]

# =============================================================================
# RUFF CONFIGURATION
# =============================================================================

[tool.ruff]
target-version = "py312"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "RUF",    # ruff-specific rules
    "S",      # flake8-bandit (security)
    "N",      # pep8-naming
    "PT",     # flake8-pytest-style
    "ASYNC",  # flake8-async
    "LOG",    # flake8-logging
    "G",      # flake8-logging-format
]
ignore = [
    "S101",   # Use of assert (common in tests)
    "S311",   # Use of random (we know what we're doing)
    "B008",   # Do not perform function calls in argument defaults
    "ARG002", # Unused method argument
    "SIM108", # Use ternary operator (sometimes less readable)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG", "PLR2004"]
"scripts/*" = ["INP001"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# =============================================================================
# BLACK CONFIGURATION
# =============================================================================

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# =============================================================================
# MYPY CONFIGURATION
# =============================================================================

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "PIL.*",
    "omegaconf.*",
    "image_quality.*",
    "anthropic.*",
    "keyring.*",
]
ignore_missing_imports = true

# =============================================================================
# PYTEST CONFIGURATION
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=alicemultiverse",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# =============================================================================
# COVERAGE CONFIGURATION
# =============================================================================

[tool.coverage.run]
branch = true
source = ["alicemultiverse"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]