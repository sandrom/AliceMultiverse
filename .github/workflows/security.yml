name: Security Checks

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  secrets-scan:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep

      - name: Run Bandit
        run: |
          bandit -r alicemultiverse -f json -o bandit-report.json -ll --skip B101,B601
          echo "## Bandit Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat bandit-report.json | python -m json.tool >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Check dependencies with Safety
        run: |
          safety check --json > safety-report.json || true
          echo "## Dependency Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat safety-report.json | python -m json.tool >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/secrets

  sensitive-data-scan:
    name: Scan for Sensitive Data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Check for sensitive patterns
        run: |
          echo "## Sensitive Data Scan" >> $GITHUB_STEP_SUMMARY
          python scripts/security/check_sensitive_patterns.py $(find . -type f -name "*.py" -o -name "*.yaml" -o -name "*.yml" -o -name "*.json" -o -name "*.md" | grep -v ".git" | head -100) || {
            echo "❌ Sensitive data detected!" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          echo "✅ No sensitive data detected" >> $GITHUB_STEP_SUMMARY

      - name: Check for hardcoded paths
        run: |
          echo "## Hardcoded Path Check" >> $GITHUB_STEP_SUMMARY
          # Check for hardcoded user paths
          if grep -r "/Users/[a-zA-Z0-9_-]*/" . --include="*.py" --include="*.yaml" --include="*.yml" --include="*.json" --exclude-dir=.git --exclude-dir=.venv | grep -v "Documents/AI/AliceMultiverse"; then
            echo "❌ Hardcoded user paths detected!" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ No hardcoded paths detected" >> $GITHUB_STEP_SUMMARY
          fi

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3